import {
  CallHandler,
  ExecutionContext,
  Injectable,
  Logger,
  NestInterceptor,
} from '@nestjs/common';
import { Observable, tap } from 'rxjs';
import { RequestService } from 'src/request.service';

@Injectable()
export class LoggingInterceptor implements NestInterceptor {
  private readonly logger = new Logger(LoggingInterceptor.name);

  constructor(private readonly requestService: RequestService) {}

  intercept(
    context: ExecutionContext,
    next: CallHandler<any>,
  ): Observable<any> | Promise<Observable<any>> {
    // üìåüìåüìåÎùºÏö∞Ìä∏ Ìï∏Îì§Îü¨ Ïù¥Ï†Ñ Ïù∏ÌÑ∞ÏÖâÌÑ∞üìåüìåüìå
    const request = context.switchToHttp().getRequest(); // request Í∞ùÏ≤¥Ïóê Ï†ëÍ∑º Í∞ÄÎä•
    // request Í∞ùÏ≤¥ÏóêÏÑú Î°úÍ∑∏Î•º ÎÇ®Í∏∏ Ï†ïÎ≥¥Îì§ÏùÑ Í∞ÄÏ†∏Ïò§Í∏∞
    const userAgent = request.get('user-agent') || '';
    const { ip, method, path: url } = request;

    // ÏöîÏ≤≠ Î°úÍ∑∏ ÎÇ®Í∏∞Í∏∞
    this.logger.log(
      `${method} ${url} ${userAgent} ${ip}: ${context.getClass().name} ${
        context.getHandler().name
      } invoked..`,
    );

    // ÎîîÎ≤ÑÍπÖ Î°úÍ∑∏ ÎÇ®Í∏∞Í∏∞
    this.logger.debug(`userId: ${this.requestService.getUserId()}`);

    const now = Date.now(); // ÎùºÏö∞Ìä∏ Ìï∏Îì§Îü¨ÏóêÏÑú ÏöîÏ≤≠ÏùÑ Ï≤òÎ¶¨ÌïòÍ∏∞ Ï†Ñ ÏãúÍ∞Ñ

    // üìåüìåüìåÎùºÏö∞Ìä∏ Ìï∏Îì§Îü¨ Ïù¥ÌõÑ Ïù∏ÌÑ∞ÏÖâÌÑ∞üìåüìåüìå
    return next.handle().pipe(
      // ÎùºÏö∞Ìä∏ Ìï∏Îì§Îü¨Ïùò ÏùëÎãµ Ïù¥ÌõÑ Ïã§Ìñâ
      // ÎùºÏö∞Ìä∏ Ìï∏Îì§Îü¨Ïùò ÏùëÎãµÏóê Ï†ëÍ∑º Í∞ÄÎä•
      tap((res) => {
        const response = context.switchToHttp().getResponse();
        const { statusCode } = response;
        const contentLength = response.get('content-length');

        // ÏùëÎãµ Î°úÍ∑∏ ÎÇ®Í∏∞Í∏∞
        this.logger.log(
          `${method} ${url} ${statusCode} ${contentLength} - ${userAgent} ${ip}: ${
            Date.now() - now
          }ms`,
        );
        this.logger.debug('Response: ', res);
      }),
    );
  }
}
